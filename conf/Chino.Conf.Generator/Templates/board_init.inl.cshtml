@using System.Reflection
@using Humanizer
@model BoardDefinition
@{
    var boardName = Model.GetType().GetCustomAttribute<BoardAttribute>()!.Name;
    var driverDevices = new Dictionary<Guid, List<string>>();
    string DeviceTypeToString(DeviceNode deviceNode)
        => deviceNode switch
        {
            SimpleDeviceNode => "simple",
            SimpleBusNode => "bus",
            _ => "unknown"
        };
    string PropertyType(object prop)
        => prop switch
        {
            byte => "uint8_t",
            ushort => "uint16_t",
            uint => "uint32_t",
            ulong => "uint64_t",
            sbyte => "int8_t",
            short => "int16_t",
            int => "int32_t",
            long => "int64_t",
            string => "std::string_view",
            _ => "auto"
        };
    string PropertyValue(object prop)
        => prop switch
        {
            byte or ushort or uint or ulong or sbyte or short or int or long => prop.ToString()!,
            string => $"\"{prop}\"",
            _ => prop.ToString()!,
        };
    DriverDefinition? GetMatchDriver(DeviceNode device)
    {
        DriverDefinition? driver = null;
        foreach (var compat in device.Compatibles)
        {
            driver = Model.Drivers.FirstOrDefault(x => x.Compatibles.Contains(compat));
            if (driver != null) break;
        }
        return driver;
    }
}
﻿// This file is generated by Chino configuration generator.
#include <chino/conf/board_desc.h>
@foreach (var driver in Model.Drivers)
{
@:#include <drivers/@(driver.Path)/@(driver.Name).h>
}

namespace chino::os::hal {
@foreach (var device in Model.Chip.Machine.Devices)
{
    var driver = GetMatchDriver(device);
    if (driver != null)
    {
@:constinit chino::os::drivers::@(driver.Name)_driver::device_t<meta::board_desc::chip::machine::devices::@device.Name, chino::os::kernel::io::device> @(device.Name)_device_(meta::board_desc::chip::machine::devices::@device.Name{});
    }
}

result<void> hal_install_devices() {
@foreach (var device in Model.Chip.Machine.Devices)
{
    var driver = GetMatchDriver(device);
    var referencedDevices = device.ReferencedDevices.Where(x => GetMatchDriver(x) != null);
    if (driver != null)
    {
@:    try_(chino::os::drivers::@(driver.Name)_driver::install_device(@(device.Name)_device_@(referencedDevices.Any() ? ", " + string.Join(", ", referencedDevices.Select(x => $"{x.Name}_device_")) : string.Empty)));
    }
}
    return ok();
}
} // namespace chino::os::hal
