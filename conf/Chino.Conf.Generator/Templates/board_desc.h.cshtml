@using System.Reflection
@model BoardDefinition
@{
    var boardName = Model.GetType().GetCustomAttribute<BoardAttribute>()!.Name;
}
﻿// This file is generated by Chino configuration generator.
#pragma once
#include <chino/os/hal/hal_meta.h>

namespace chino::os::hal {
struct board_desc {
    inline static constexpr uuid id = @(Model.Id.ToString("X"));
    inline static constexpr std::string_view name = "@(Html.Raw(boardName))";

    struct chip {
        inline static constexpr uuid id = @(Model.Chip.Id.ToString("X"));
        inline static constexpr std::string_view name = "@(Html.Raw(Model.Chip.Name))";
        inline static constexpr std::string_view vendor = "@(Html.Raw(Model.Chip.Vendor))";

        struct machine {
            inline static constexpr std::string_view name = "@(Html.Raw(Model.Chip.Machine.Name))";

            struct devices {
                @foreach(var device in Model.Chip.Machine.Devices){
@:                    struct @device.Name {
@:                    };
                }

                inline static constexpr size_t size() noexcept { return @Model.Chip.Machine.Devices.Count; }
            };
        };
    };
};
} // namespace chino::os::hal
